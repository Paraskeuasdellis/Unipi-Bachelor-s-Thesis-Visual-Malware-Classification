from keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold,GridSearchCV
from sklearn.ensemble import BaggingClassifier,RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import f1_score,classification_report,confusion_matrix,plot_confusion_matrix
import xgboost as xgb
from keras.models import Sequential, Input, Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
#from keras.layers.normalization import BatchNormalization
from sklearn.utils import class_weight
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

def malware_model(xtrain,xtest,ytrain,ytest):
    
    Malware_model = Sequential()
    Malware_model.add(Conv2D(30, kernel_size=(3,3),
                     activation='relu',
                     input_shape=(64,64,3)))
    Malware_model.add(MaxPooling2D(pool_size=(2, 2)))
    Malware_model.add(Conv2D(15, (3, 3), activation='relu'))
    Malware_model.add(MaxPooling2D(pool_size=(2, 2)))
    Malware_model.add(Dropout(0.25))
    Malware_model.add(Flatten())
    Malware_model.add(Dense(128, activation='relu'))
    Malware_model.add(Dropout(0.5))
    Malware_model.add(Dense(50, activation='relu'))
    Malware_model.add(Dense(54, activation='softmax'))
    Malware_model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])
    return Malware_model




def rnfc(xtrain,xtest,ytrain,ytest,classweights):
    
        size,a,b,rgb = xtrain.shape
        size1,a1,b1,rgb1 = xtest.shape 
        #reshaping to fit
        X_trainr = xtrain.reshape((size,a*b*rgb))
        X_testr = xtest.reshape((size1,a1*b1*rgb1))
        #remove one-hot encoding
        ytrainn = np.argmax(ytrain, axis=1)
        ytestn = np.argmax(ytest, axis=1)
        rf = RandomForestClassifier(criterion='entropy',n_jobs=12,class_weight=classweights)
        # train model
        rf.fit(X_trainr,ytrainn)
        print("RandomForestClassifier score : ",rf.score(X_testr,ytestn))
        # predict to calculate f1score,
        rf1 = rf.predict(X_testr)
        print(classification_report(ytestn, rf1))
        
    
        
        
 
def xgbfunc(xtrain,xtest,ytrain,ytest,classweights):
        # weights ok
        xgbm = xgb.XGBClassifier(objective= 'multi:softmax',n_jobs = 12,n_estimators=50,num_classes=54,sample_weight = classweights)
        size,a,b,rgb = xtrain.shape
        size1,a1,b1,rgb1 = xtest.shape
        #reshaping to fit
        X_trainr = xtrain.reshape((size,a*b*rgb))
        X_testr = xtest.reshape((size1,a1*b1*rgb1))
        #remove one-hot encoding
        ytrainn = np.argmax(ytrain, axis=1)
        ytestn = np.argmax(ytest, axis=1)
        eval_set = [(X_testr,ytestn)]
        #train model
        xgbm.fit(X_trainr,ytrainn,eval_set = eval_set)
        #predict to calculate f1score,
        xgbmpred = xgbm.predict(X_testr)
        print(classification_report(ytestn, xgbmpred))
        

def svm(xtrain,xtest,ytrain,ytest):

        svm = SVC(kernel='linear',gamma='auto')
        size,a,b,rgb = xtrain.shape
        size1,a1,b1,rgb1 = xtest.shape
        #reshaping to fit
        X_trainr = xtrain.reshape((size,a*b*rgb))
        X_testr = xtest.reshape((size1,a1*b1*rgb1))
        #remove one-hot encoding
        ytrainn = np.argmax(ytrain, axis=1)
        ytestn = np.argmax(ytest, axis=1)
        #train model
        svm.fit(X_trainr,ytrainn)
        print(svm.score(X_testr,ytestn))
        #predict to calculate f1score
        ypred = svm.predict(X_testr)
        print("f1score:    ", f1_score(ytestn,ypred,average='macro'))


num_classes = 54
paths = ["C:\ptuxiakh\imgs\samples","C:\ptuxiakh\imgs\samples1"]
for i in range(len(paths)):
    if i == 0:
        print("Raw code convertion of hexadecimal files into PNG images ")
    else:
        print("Malwares to PNG images via scurve/binvis(layout map = hilbert,color map = entropy,size = 128x128(here will be resized to  64x64 due to memory issue.))")
    path_root = paths[i]

    #kf10 = KFold(n_splits=5)
    batches = ImageDataGenerator().flow_from_directory(directory=path_root,target_size=(64,64), batch_size=130000)
    imgs, labels = next(batches)
    #spli = imgs/255.
    classes = batches.class_indices.keys()
    perc = (sum(labels)/labels.shape[0])*100
    plt.xticks(rotation='vertical')
    plt.bar(classes,perc)
    plt.show()
    
    X_train, X_test, y_train, y_test = train_test_split(imgs/255.,labels, test_size=0.3)
    '''for train_i,test_i in kf10.split(spli):
        X_train,X_test,y_train,y_test = spli[train_i],spli[test_i],\
                                        labels[train_i],labels[test_i]
    
        y_train_new = np.argmax(y_train, axis=1)
        class_weights = class_weight.compute_class_weight(class_weight='balanced', classes=np.unique(y_train_new),
                                                          y=y_train_new)
        class_weights = {i: class_weights[i] for i in range(len(np.unique(y_train_new)))}'''
    y_train_new = np.argmax(y_train, axis=1)
    class_weights = class_weight.compute_class_weight(class_weight='balanced', classes=np.unique(y_train_new),
                                                      y=y_train_new) 
    class_weights = {i: class_weights[i] for i in range(len(np.unique(y_train_new)))} 
    # -----SVC-----
    #svm(X_train, X_test, y_train, y_test)
    #-----RandomForestClassifier-----
    rnfc(X_train,X_test,y_train,y_test,class_weights)
    #-----Sequential-----
    #Malware_model = malware_model(X_train, X_test, y_train, y_test)
    #Malware_model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50,  class_weight=class_weights)
    #scores = Malware_model.evaluate(X_test,y_test)
    #print("Loss: ",scores[0])
    #print("Accuracy: ",scores[1])
    #-----xgb-----
    #xgbfunc(X_train,X_test,y_train,y_test,class_weights)
    # -*- coding: utf-8 -*-
    """
    Spyder Editor
    
    This is a temporary script file.
    """

